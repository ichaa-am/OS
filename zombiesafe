1.	/*Here is a method to avoid the process from becoming Zombie. The cleanup is done by using signal handler */  
2.	  
3.	  
4.	#include <stdlib.h>  
5.	#include <sys/types.h>  
6.	#include <unistd.h>  
7.	#include <signal.h>  
8.	#include <string.h>  
9.	#include <sys/wait.h>  
10.	  
11.	sig_atomic_t child_exit_status;  
12.	void clean_up_child_process (int signal_number)  
13.	{  
14.	  /* Clean up the child process. */  
15.	  int status;  
16.	  wait (&status);  
17.	  
18.	  /* Store its exit status in a global variable. */  
19.	  child_exit_status = status;  
20.	}  
21.	  
22.	int main ()  
23.	{  
24.	  pid_t child_pid;  
25.	  
26.	  /* Handle SIGCHLD by calling clean_up_child_process. */  
27.	  struct sigaction sigchld_action;  
28.	  memset (&sigchld_action, 0, sizeof (sigchld_action));  
29.	  sigchld_action.sa_handler = &clean_up_child_process;  
30.	  sigaction (SIGCHLD, &sigchld_action, NULL);  
31.	  
32.	   /* Create child*/  
33.	  child_pid = fork ();  
34.	  if (child_pid > 0) {  
35.	  
36.	    /* Parent process */  
37.	    sleep (60);  
38.	  }  
39.	  else {  
40.	  
41.	    /*Child process. Exit immediately. */  
42.	    exit (0);  
43.	  }  
44.	  return 0;  
45.	}  
